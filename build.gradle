import org.gradle.testing.jacoco.tasks.JacocoReport

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'com.google.protobuf' version "0.9.1"
    id 'jacoco'
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.1.4" apply false
}

if (System.getenv("ENABLE_GCP") == "true") {
    apply plugin: "com.google.cloud.artifactregistry.gradle-plugin"
}

group = 'io.emeraldpay'
version = '0.12-alpha.3'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://maven.emrld.io" }
}

sourceSets {
    main {
        proto {
            srcDir 'api-definitions/proto'
        }
    }
}

dependencies {
    api "io.grpc:grpc-protobuf:${grpcVersion}"
    api "io.grpc:grpc-stub:${grpcVersion}"
    api "io.projectreactor:reactor-core:${reactor}"
    api "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:2.0.46.Final"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}"
    api "com.salesforce.servicelibs:reactor-grpc-stub:${reactiveGrpcVersion}"

    implementation 'io.emeraldpay.etherjar:etherjar-domain:0.11.0'

    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
        if (osdetector.os == "osx") {
            artifact += ":osx-x86_64"
        }
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        reactor {  artifact = "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            reactor {}
        }
    }
}

afterEvaluate {
    publish.dependsOn(compileJava)
    publish.dependsOn(generateProto)
    publishToMavenLocal.dependsOn(generateProto)
    generateProto.dependsOn(clean)
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    repositories {
        maven {
            url "artifactregistry://us-maven.pkg.dev/emeraldpay-prod/maven"
        }
    }

    publications {
        EmeraldPublication(MavenPublication) {
            from components.java

            groupId project.group
            artifactId project.name
            version project.version
            pom {
                name = 'Emerald API'
                description = 'Emerald API Client (gRPC Stubs and Wrappers for Java 11+)'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "splix"
                        name = "Igor Artamonov"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/emeraldpay/emerald-java-client.git'
                    developerConnection = 'scm:git:git@github.com:emeraldpay/emerald-java-client.git'
                    url = 'https://github.com/emeraldpay/emerald-java-client'
                }
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

task coverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}